name: OpenHarmony

on:
  #push:
  schedule:
    - cron: "0 19 * * *"
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          ["x86", "n1", "pi-3b-plus", "k2p", "xiaomi-cr660x", "redmi-ax6"]
    env:
      MSG_PREFIX: "Ref: ${{ github.ref }}\nPlatform: ${{ matrix.platform }}\nCommit message: ${{ github.event.head_commit.message }}\n\n"
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      TZ: Asia/Shanghai

    steps:
      - name: TG Notification - üéâ
        run: |
          curl -sX POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}", "text": "${{ env.MSG_PREFIX }} üéâ Building OpenHarmony..."}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage >> /dev/null

      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
          rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev


          ulimit -u 10000
          ulimit -n 4096
          ulimit -d unlimited
          ulimit -m unlimited
          ulimit -s unlimited
          ulimit -t unlimited
          ulimit -v unlimited

          docker rmi `docker images -q`

          sudo timedatectl set-timezone "$TZ"

          sudo -E swapoff -a


          rm -rf ~/.config/rclone
          mkdir -p ~/.config/rclone
          # download rclone config
          # curl -Lo ~/.config/rclone/rclone.conf "${{secrets.RCLONE_CONFIG_LINK}}"

          # check server status
          # rclone mkdir od:/openwrt/check-status-for-github-action

          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /etc/mysql /etc/php /swapfile
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Clone source code
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt

      - name: ÊõøÊç¢opÂ≠óÁ¨¶‰∏∫È∏øËíôos
        run: |
          sed -i "s/OpenWrt/OpenHarmony/g" `grep openwrt -rl ./openwrt/package`
          sed -i "s/OpenWrt/OpenHarmony/g" `grep openwrt -rl ./openwrt/include`        

      - name: Cache
        if: contains(matrix.platform, '‰∏çÁºìÂ≠òx86')
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: "true"
          prefix: ${{ github.workspace }}/openwrt

      # - name: Patch zzz-default-settings
      #   run: |
      #     cp ./${{ matrix.platform }}/zzz-default-settings.patch ./openwrt
      #     cd openwrt
      #     patch -p0 < zzz-default-settings.patch

      - name: Add packages
        run: |
          cd openwrt          
          chmod +x $GITHUB_WORKSPACE/add-package.sh
          $GITHUB_WORKSPACE/add-package.sh

      - name: Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load configuration
        run: |

          cp $GITHUB_WORKSPACE/${{ matrix.platform }}/.config $GITHUB_WORKSPACE/openwrt/.config
          cd openwrt
          # rm -f .config*

      #- name: add more apps
      #  if: contains(matrix.platform, 'x86')
      #  run: cat $GITHUB_WORKSPACE/apps.config >> $GITHUB_WORKSPACE/openwrt/.config
      #
      #- name: add more apps
      #  if: contains(matrix.platform, 'n1')
      #  run: cat $GITHUB_WORKSPACE/apps.config >> $GITHUB_WORKSPACE/openwrt/.config
      #
      #- name: add more apps
      #  if: contains(matrix.platform, 'pi')
      #  run: cat $GITHUB_WORKSPACE/apps.config >> $GITHUB_WORKSPACE/openwrt/.config

      - name: make defconfig
        run: |
          cd openwrt
          make defconfig

      - name: echo openwrt config
        run: cat $GITHUB_WORKSPACE/openwrt/.config

      - name: echo plugins
        run: |
          cd openwrt

          echo
          echo "=========================================="
          grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
          grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
          sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
          sed -i 's/CONFIG_PACKAGE_/„ÄÅ/g' Plug-in
          sed -i '/qbittorrent_static/d' Plug-in > /dev/null 2>&1
          sed -i 's/=y/\ /g' Plug-in
          awk '$0=NR$0' Plug-in > Plug-2
          awk '{print "	" $0}' Plug-2 > Plug-in
          echo
          echo
          echo "	      Â∑≤ÈÄâÊèí‰ª∂ÂàóË°®"
          cat Plug-in
          rm -rf {Plug-in,Plug-2}
          echo
          echo "=========================================="

      - name: Make download
        run: |
          cd openwrt
          make download -j8

      #- name: Place clash-core
      #  run: |
      #    mkdir -p openwrt/package/luci-app-openclash/luci-app-openclash/root/etc/openclash/core
      #
      #    if [ ${{ matrix.platform }} == "x86" ]; then
      #      cp openwrt/package/luci-app-openclash/core-lateset/premium/clash-linux-amd64-*.gz openwrt/package/luci-app-openclash/luci-app-openclash/root/etc/openclash/core
      #    else
      #      cp openwrt/package/luci-app-openclash/core-lateset/premium/clash-linux-armv8-*.gz openwrt/package/luci-app-openclash/luci-app-openclash/root/etc/openclash/core
      #    fi
      #
      #    cd openwrt/package/luci-app-openclash/luci-app-openclash/root/etc/openclash/core
      #    gzip -d *.gz
      #    chmod +x *
      #    mv * clash_tun

      - name: Support USB flash disk boot
        if: contains(matrix.platform, 'pi-3b-plus')
        run: |
          cd openwrt          
          git apply $GITHUB_WORKSPACE/${{ matrix.platform }}/0001-support-USB-flash-disk-boot.patch

      - name: Storage Spaces
        run: |
          df -h /

      #      - name: ‰∏ä‰º†ÁºñËØëÁéØÂ¢É
      #        run: |
      #          7za a op-env.7z ./openwrt
      #
      #          rclone copy op-env.7z gd:/openwrt/${{ matrix.platform }}/
      #          rclone copy op-env.7z od:/openwrt/${{ matrix.platform }}/
      #
      #          rm -f op-env.7z

      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      #   if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

      - name: Compile the firmware
        run: |

          cd openwrt

          /bin/bash $GITHUB_WORKSPACE/diy-2.sh


          if [ -n "$(ls -A "$GITHUB_WORKSPACE/diy" 2>/dev/null)" ]; then
           cp -Rf $GITHUB_WORKSPACE/diy/* ./
          fi                

          make -j$(($(nproc) + 1)) || make -j1 V=s

      - name: Storage Spaces
        run: |
          df -h /

      - name: clear space
        run: |
          cd openwrt
          find * | grep -v bin | xargs rm -rf

      - name: Organize files
        if: ${{ !contains(matrix.platform, 'n1') }}
        run: |

          cd openwrt/bin/targets/*/*

          rm -rf \
          packages \
          sha256* \
          *manifest \
          *rootfs* \
          *info

          # *bin

          echo "PACKAGED_OUTPUTPATH=$PWD" >> $GITHUB_ENV

      - name: Package Armvirt as OpenWrt
        if: contains(matrix.platform, 'n1')
        uses: ophub/flippy-openwrt-actions@main
        env:
          OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
          PACKAGE_SOC: s905d
          # GZIP_IMGS: .7z
          WHOAMI: OpenHarmony
          DISTRIB_DESCRIPTION: OpenHarmony

      - name: Organize files
        if: ${{ contains(matrix.platform, 'n1') }}
        run: |
          rm -f ${{ env.PACKAGED_OUTPUTPATH }}/*.tar.gz

      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M"-${{ matrix.platform }})"
          # touch release.txt
          # echo ${{ matrix.platform }} >> release.txt

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: "OpenHarmony | Âõ∫‰ª∂‰∏ãËΩΩ"
          tag_name: "OpenHarmony"
          body_path: release.txt
          files: ${{ env.PACKAGED_OUTPUTPATH }}/*

      #- name: clear bins
      #  run: rm -rf ${{ env.PACKAGED_OUTPUTPATH }}
      #
      #- name: Storage Spaces
      #  run: |
      #    df -h /
      #
      #- name: zip toolchain
      #  run: |
      #    cd openwrt
      #    tar -pPczf - staging_dir/host* staging_dir/tool* build_dir/host* build_dir/tool* | split -d -b 100m - ${{ matrix.platform }}.tar.gz.
      #    ls -l
      #
      #- name: Upload toolchain to release
      #  uses: softprops/action-gh-release@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    name: "toolchain for ${{ matrix.platform }}"
      #    tag_name: "toolchain-${{ matrix.platform }}"
      #    files: "/home/runner/work/build-openwrt/build-openwrt/openwrt/${{ matrix.platform }}.tar.gz.*"

      #- name: Upload firmware to owncloud
      #  run: |
      #
      #    # curl -fsSL git.io/file-transfer | sh
      #    # ./transfer cow --block 2621440 -s -p 64 --no-progress ${PACKAGED_OUTPUTPATH} 2>&1 | tee cowtransfer.log
      #    # echo "DOWNLOAD_LINK=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV
      #
      #    rclone copy ${{ env.PACKAGED_OUTPUTPATH }} od:/openwrt/${{ matrix.platform }}/$(date "+%Y-%m-%d_%H%M%S")

      - name: TG Notification - ‚ùå
        if: ${{ !success() }}
        run: |
          curl -sX POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}", "text": "${{ env.MSG_PREFIX }} ‚ùå Build failed or canceled"}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage >> /dev/null

      - name: TG Notification - ‚úîÔ∏è
        if: ${{ success() }}
        run: |
          curl -sX POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}", "text": "${{ env.MSG_PREFIX }} ‚úîÔ∏è Done"}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage >> /dev/null

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 3
          keep_minimum_runs: 2

      # - name: Remove old Releases
      #   uses: dev-drprasad/delete-older-releases@v0.1.0
      #   with:
      #     keep_latest: 1
      #     delete_tags: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
